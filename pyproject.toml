[project]
name = "aider-composer"
version = "0.1.0"
description = "A VS Code extension for AI-assisted code editing"
requires-python = ">=3.11"

[tool.ruff]
# Exclude standard directories and files
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv"
]

# Core settings
line-length = 88  # Match black's default
target-version = "py311"
unsafe-fixes = false

# Formatting settings
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Lint settings
[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C",     # mccabe
    "C4",    # comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T",     # flake8-print
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT"    # flake8-2020
]

ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "D203",    # One blank line before class (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line
    "E501"     # Line too long (handled by black)
]

allowed-confusables = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-statements = 50

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["server"]
known-third-party = ["flask", "aider", "pytest"]
lines-between-types = 1
split-on-trailing-comma = true
section-order = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["E402", "E501"]
"**/__init__.py" = ["E402", "F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type", "format"]

[tool.pytest.ini_options]
testpaths = ["server/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=server --cov-report=term-missing --tb=short"
pythonpath = [".", ".venv/lib/python3.12/site-packages"]
